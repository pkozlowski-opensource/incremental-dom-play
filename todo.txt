ALGORITHM
-----------------------------------
- what happens with sibiling nodes?
- how would I go about the "refresh" functionality?

IMPL
-----------------------------------
- unify views and component handling (but also think about what really makes those different!)
- tests for renderer interactions (remaining: event handlers)
- need better asserts on VDOM so writing tests is easier
- loops with a group of sibiling elements => loops need a view... => ng-content?
- loops with stable sorting (keyed sorting)
- map props (class, style, ...)
- attrs - should be as simple as prefixing props with attr. => BTW, why Angular is making it so complex? Speed?

PERF (ideas to test)
-----------------------------------
- use byte-masking for type instead of strings (will result in an additional field in VDOM)
- have different VDOM node types to save memory (this will make those polymorphic, although still a limited set)
- cache cursors
- create different methods for elements (with / without properties etc.) => there would be many combinations!
- track memory usage - list places where memory gets allocated
- skip parts of the tree optimizations
- I could probably be skipping many comparison when I know that there are no bindings
- "static" blocks where I could totally skip comparisons (or even prun / not create the VDOM!)
- innerHtml for "static" parts (this would probably "kill" ReactNative-like renderers)

PERF (failed ideas)
-----------------------------------
- explore impact of monomorphic calls (elementStart mostly) => doesn't seem to have any impact...
- is rendering to doc fragment any faster? => minimal difference (if any), ~1ms

FUNCTIONALITY
-----------------------------------
- beef up components (host, OnPush, outputs, lifecycle hooks)
- content projection
- refresh / refreshAll
- refresh cycles / uni-directional data flow
- web components compatibility (should work "out of the box", verify)
- server-side rendering (hydration)
- data as multiple arguments
- HTML compiler
- namespaced elements (SVG, Math etc.)